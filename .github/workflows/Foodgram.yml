name: Foodgram

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest

    - name: Lint with flake8
      run: flake8 .
  
  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: skhortyuk/foodgram:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - uses: actions/checkout@v2
      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          source: "nginx/default.conf.template,./docker-compose.yaml"
          target: "~/foodgram_project"
        
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        env:
          PRODUCTION: True
          DOCKER: True
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
          EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
          EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
          DOMAIN: ${{ secrets.DOMAIN }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}  
          envs: PRODUCTION,DOCKER,SECRET_KEY,DB_NAME,DB_HOST,POSTGRES_USER,POSTGRES_PASSWORD,
                DB_PORT,EMAIL_HOST,EMAIL_HOST_USER,EMAIL_HOST_PASSWORD,EMAIL_PORT,DOMAIN
          script: |
            cd foodgram_project
            
            export PRODUCTION=$PRODUCTION
            export DOCKER=$DOCKER
            export SECRET_KEY=$SECRET_KEY
            export DB_NAME=$DB_NAME
            export DB_HOST=$DB_HOST
            export POSTGRES_USER=$POSTGRES_USER
            export POSTGRES_PASSWORD=$POSTGRES_PASSWORD
            export DB_PORT=$DB_PORT
            export EMAIL_HOST=$EMAIL_HOST
            export EMAIL_HOST_USER=$EMAIL_HOST_USER
            export EMAIL_HOST_PASSWORD=$EMAIL_HOST_PASSWORD
            export EMAIL_PORT=$EMAIL_PORT
            export DOMAIN=$DOMAIN
            

            printenv | grep -E "PRODUCTION|DOCKER|SECRET_KEY|DB_NAME|DOMAIN" > .env
            printenv | grep -E "DB_HOST|POSTGRES_USER|POSTGRES_PASSWORD|DB_PORT" >> .env
            printenv | grep -E "EMAIL_HOST|EMAIL_HOST_USER|EMAIL_HOST_PASSWORD|EMAIL_PORT" >> .env
            
            sudo docker-compose up -d --force-recreate
            docker exec -i web python manage.py makemigrations  
            docker exec -i web python manage.py migrate 
            docker exec -i web python manage.py collectstatic --no-input
                         
      
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!
